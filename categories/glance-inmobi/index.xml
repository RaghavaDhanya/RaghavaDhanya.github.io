<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Glance-Inmobi on AI Logs</title><link>https://ai.ragv.in/categories/glance-inmobi/</link><description>Recent content in Glance-Inmobi on AI Logs</description><generator>Hugo -- 0.140.2</generator><language>en-us</language><copyright>2023 Raghava Dhanya | License |</copyright><lastBuildDate>Wed, 21 Feb 2024 12:25:03 +0530</lastBuildDate><atom:link href="https://ai.ragv.in/categories/glance-inmobi/index.xml" rel="self" type="application/rss+xml"/><item><title>A Tale of a Suicidal Container</title><link>https://ai.ragv.in/posts/a-tale-of-suicidal-container/</link><pubDate>Wed, 21 Feb 2024 12:25:03 +0530</pubDate><guid>https://ai.ragv.in/posts/a-tale-of-suicidal-container/</guid><description>&lt;p>One fine day, I sat down to optimize the size of a Docker image. Like many times before, I opted for &lt;a href="https://github.com/GoogleContainerTools/distroless">distroless&lt;/a> images as my base, a choice I had made countless times before without a hitch.&lt;/p>
&lt;p>Distroless images, for the uninitiated, are peak minimalism, containing only the essential libraries and binaries required to run the application. Not only do they trim the fat off the image size, but they also mitigate the risk of &lt;a href="https://www.cve.org/About/Overview">CVEs&lt;/a> lurking within.&lt;/p></description></item><item><title>Python with a Dash of C++: Optimizing Recommendation Serving</title><link>https://ai.ragv.in/posts/python-with-a-dash-of-cpp-optimizing/</link><pubDate>Thu, 30 Jun 2022 16:54:09 +0530</pubDate><guid>https://ai.ragv.in/posts/python-with-a-dash-of-cpp-optimizing/</guid><description>&lt;p>Serving recommendation to 200+ millions of users for thousands of candidates with less than 100ms is &lt;strong>hard&lt;/strong> but doing that in Python is &lt;strong>harder&lt;/strong>. Why not add some compiled spice to it to make it faster? Using Cython you can add C++ components to your Python code. Isn&amp;rsquo;t all machine learning and statistics libraries already written in C and Cython to make them super fast? Yes. But there&amp;rsquo;s still some optimizations left on the table. I&amp;rsquo;ll go through how I optimized some of our sampling methods in the recommendation system using C++.&lt;/p></description></item><item><title>Go faster with Go: Golang for ML Serving</title><link>https://ai.ragv.in/posts/golang-for-machine-learning-serving/</link><pubDate>Mon, 20 Jun 2022 21:36:00 +0530</pubDate><guid>https://ai.ragv.in/posts/golang-for-machine-learning-serving/</guid><description>&lt;p>So the ask is to do &lt;strong>3 Million Predictions per second&lt;/strong> with as little resources as possible. Thankfully its one of the simpler model of Recommendation systems, Multi Armed Bandit(MAB).
Multi Armed bandit usually involves sampling from distribution like &lt;a href="https://en.wikipedia.org/wiki/Beta_distribution">Beta Distribution&lt;/a>. That&amp;rsquo;s where the most time is spent. If we can concurrently do as many sampling as we can, we&amp;rsquo;ll use the resources well. Maximizing Resource utilization is the key to reducing overall resources needed for the model.&lt;/p></description></item></channel></rss>